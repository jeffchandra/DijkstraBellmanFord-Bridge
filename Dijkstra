public class Dijkstra {
    static final int V = 6; // Number of vertices
    static final int Z = 5; // Integer added to every edge to avoid negative weighted edge

    // Finds the first unvisited vertex with the minimum distance
    public int minDistance(int dist[], int edge[], Boolean visited[]) {
        int min = Integer.MAX_VALUE;
        int min_index = -1;
        for (int v = 0; v < V; v++)
            if (visited[v] == false && dist[v] - (Z * edge[v]) < min) {
                min = dist[v] - (Z * edge[v]);
                min_index = v;
            }

        return min_index;
    }

    // Prints the result as a table with four columns
    public void printSolution(int dist[], int prev[], int edge[]) {
        System.out.println("Vertex \t\t Distance from Source \t\t Previous \t\t Edges from source");
        System.out.println("------------------------------------------------------------------------");
        for (int i = 0; i < V; i++) {
            System.out.println(i + "\t\t\t " + dist[i] + "\t\t\t\t\t\t\t " + prev[i] + "\t\t\t\t " + edge[i]);
            System.out.println("------------------------------------------------------------------------");
        }
    }

    // Dijkstra's algorithm
    public void dijkstra(Integer graph[][], int src) {
        Integer graph2[][] = new Integer[V][V];
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                if (graph[i][j] != null) graph2[i][j] = graph[i][j] + Z;
                else graph2[i][j] = 0;
            }
        }

        int dist[] = new int[V];
        int prev[] = new int[V];
        int edge[] = new int[V]; // New array to count number of edge in a path to [v] vertex from src

        Boolean visited[] = new Boolean[V];
        for (int i = 0; i < V; i++) {
            dist[i] = Integer.MAX_VALUE;
            prev[i] = -1;
            edge[i] = 0; // Initial all of them to 0
            visited[i] = false;
        }
        dist[src] = 0;

        for (int count = 0; count < V - 1; count++) {
            int u = minDistance(dist, edge, visited);
            visited[u] = true;
            for (int v = 0; v < V; v++) {
                if (!visited[v] && graph2[u][v] != 0 &&
                        dist[u] + graph2[u][v] - (Z * (edge[u] + 1)) < dist[v] - (Z * edge[v])) { // From equation: X + Z(n) < Y + Z(m)
                    dist[v] = dist[u] + graph2[u][v];
                    prev[v] = u;
                    edge[v] = edge[u] + 1; // Updates edge, add one from the previous edge
                }
            }
        }
        for (int i = 0; i < V; i++) dist[i] -= (Z * edge[i]);

        printSolution(dist, prev, edge);
    }
    public static void main(String[] args)
    {
        Integer graph[][] = new Integer[][] {
                { null,    4,    5,   -3, null, null},
                {    4, null, null, null,   -2, null},
                {    5, null, null,   -4,    4,    1},
                {   -3, null,   -4, null,    4, null},
                { null,   -2,    4,    4, null,    2},
                { null, null,    1, null,    2, null}
        };
        Dijkstra s = new Dijkstra();
        s.dijkstra(graph, 0);
    }
}
